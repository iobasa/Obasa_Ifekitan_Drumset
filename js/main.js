(() => {
  console.log('fired!');

  function logKeyCode(event) {
    //debugger;
    // event is an object that is generated by any event
    // it contains all of the info about the event, what
    // elelment triggered it, where it occurred on the page etc
    console.log(event.keyCode);

    const currentKey = document.querySelector(`div[data-key="${event.keyCode}"]`);

    if (!currentKey) return;
    // if there is no matching div with that key, that exit


      // apply the playing class to the current div (the matching keycode)
      currentKey.classList.add(`playing`);

      // play the audio that goes with the div
      let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);
      currentAudioClip.currentTime = 0;
      currentAudioClip.play();
  }

  function removePlayingClass(event) {
    // listen for the transition to end, and then remove the playing class from the current key

    // I need a transition that only fires once so that I only run the function once
    if (event.propertyName !== "transform") return; //else {
      // event.target is the target of the current event -> in this case the div, becuase that's the element that's transitioning
      console.log(`transform transition is done!`);
      event.target.classList.remove(`playing`);
  }

/*
    let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);

    // if we make a successful match, then play that matching audio element
    // a ! (bang operator) is a test for a false value => mean "not"
    if (!currentAudioClip) { //it equals true or false, ! in front means false
      return;
      // currentAudioClip.play();
    } else {
      // there is no match, so no audio element breaking anything
      // a return will make a function exit without breaking anything
      let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);
      currentAudioClip.currentTime = 0;
      currentAudioClip.play();
      // return;
    }

  }*/

/*  function resetSound(event) {

    // I need this to reset audio but only if i can find a matching elelment
    // the event has the keycode - I need to make sure I find the audio first, and the reset it

    // audio has a currentTime property - reset that to 0?
    //  need to check a condition with
    let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);

    if (currentAudioClip) {
      return;
    } else {
    currentAudioClip.pause();
    currentAudioClip.currentTime = 0;
  }
} */

  const keys = Array.from(document.querySelectorAll(`.key`));
  keys.forEach(key => key.addEventListener(`transitionend`, removePlayingClass));

  // try to get keyboard keypress events
  window.addEventListener("keydown", logKeyCode);
  //window.addEventListener("keyup", resetSound);


})();
